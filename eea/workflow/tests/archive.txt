The Archive workflow action
---------------------------

The Archive action is implemented as a drop-in fake workflow action. 
It is added in the workflow menu. If the object is archived, then this action
is no longer available. Instead, a viewlet is shown that describes the archival
status of the object.

    >>> self.loginAsPortalOwner()
    >>> _ = portal.invokeFactory("Folder", 'archived-test-folder')
    >>> folder = portal['archived-test-folder']
    >>> _ = folder.invokeFactory("Document", 'doc2')
    >>> doc = folder['doc2']

By default, archiving is allowed on all objects. An archived object is marked with the
IObjectArchived interface

    >>> from eea.workflow.interfaces import IObjectArchived, IObjectArchivator
    >>> IObjectArchived.providedBy(doc)
    False

We use the IObjectArchivator interface to perform archiving actions.

    >>> adapter = IObjectArchivator(doc)
    >>> adapter.archive(doc, **dict(initiator='TheInitiator', reason='content_is_outdated', custom_message=''))

By archiving the object, the object is reindexed.

    >>> brain = portal.portal_catalog.searchResults(getId='doc2')[0]
    >>> brain.ExpirationDate == doc.ExpirationDate()
    True

The object is expired:

    >>> expired = doc.ExpirationDate()
    >>> print expired   #this looks like: 2013-10-01T17:37:25+03:00
    20...

The object provides the IObjectArchived interface:

    >>> IObjectArchived.providedBy(doc)
    True

An entry has been added to the workflow history of that object

    >>> action = [entry for entry in doc.workflow_history['simple_publication_workflow'] if entry['action'] == 'Archive']
    >>> print len(action)
    1
    >>> action = action[0]
    >>> print action['comments']
    >>> msg = u"Archived by portal_owner on %s by request from "
